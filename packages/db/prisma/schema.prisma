generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PLANS {
  BASIC
  ADVANCED
  PRO
  BLACK_KING
}

model Account {
  id              String            @unique @default(cuid())
  userId          String            @unique
  avatarUrl       String?           @db.Text
  user_name       String?           @db.Text
  user_bio        String?           @db.Text
  phone           Int?
  support_email   String?
  verified        Boolean           @default(false)
  verification_steps        Int           @default(0)
  plan            PLANS?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  Course          Course[]
  Product         Product[]
  Website         Website[]
  Coupon          Coupon[]
  Sale            Sale[]
  Notification    Notification[]
  Student         Student[]
  PaymentsConnect PaymentsConnect[]
  Payments        Payments[]

}

model PaymentsConnect {
  id                  String   @unique @default(cuid())
  accountId           String   @unique
  chargilyPublicKey   String
  chargilySecretKey   String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  Account             Account? @relation(fields: [accountId], references: [id])

  @@index([id])
  @@index([accountId])
}

model Course {
  id                     String     @unique @default(cuid())
  rating                 Float      @default(0)
  accountId              String
  title                  String
  courseUrl              String?    @db.VarChar(199)
  youtubeUrl             String?    @db.VarChar(199)
  thumbnailUrl            String?    @db.VarChar(199)
  courseResume           String?    @db.VarChar(199)
  courseRequirements     String?    @db.VarChar(199)
  courseWhatYouWillLearn String?    @db.VarChar(199)
  courseDescription      Json?
  seoTitle               String?
  seoDescription         String?
  price                  Float?
  compareAtPrice         Float?  
  studentsNbr            Int?
  preview_video          String?    @db.VarChar(199)
  profit                 String?
  length                 Float      @default(0)
  nbrChapters            Float      @default(0)
  status                 String
  trainers               String?
  suspended              Boolean    @default(false)
  level                  String     @default("BEGINNER")
  allowComment           Boolean    @default(true)
  allowRating            Boolean    @default(true)
  forceWatchAllCourse    Boolean    @default(true)
  certificate            Boolean    @default(false)
  Account                Account?   @relation(fields: [accountId], references: [id])
  createdAt              DateTime   @default(now())
  updatedAt              DateTime   @updatedAt
  Comment                Comment[]

  @@index([id])
  @@index([accountId])
}

model Chapter {
  id          String   @unique @default(cuid())
  courseID    String
  title       String
  modules     Json?
  orderNumber Int
  isVisible   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Product {
  id                String   @unique @default(cuid())
  title             String
  price             Float?
  numberOfDownloads Int?
  subDescription    String?  @db.VarChar(199)
  SeoTitle          String?
  SeoDescription    String?  @db.VarChar(199)
  thumbnailUrl       String?
  fileUrl           String?
  description       Json?
  status            String?
  compareAtPrice    Float?
  accountId         String
  isVisible         Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  Account           Account? @relation(fields: [accountId], references: [id])

  @@index([id])
  @@index([accountId])
}

model Website {
  id             String   @unique @default(cuid())
  accountId      String   @unique
  name           String?
  description    String?  @db.Text
  subdomain      String?  @unique
  customDomain   String?  @unique
  suspended      Boolean  @default(false)
  enableReferral Boolean  @default(false)
  privacy_policy Json?
  phoneNumber    String?
  supportEmail   String?
  favicon        String?  @default("https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcT51NSq8RTDzIs7VaAcWWvKkyiagU5dz6hiAA&usqp=CAU") @db.Text
  color          String?  @default("#FC6B00")
  logo           String?  @db.VarChar(199)
  font           String   @default("font-cal")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  Account        Account? @relation(fields: [accountId], references: [id])
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

model Coupon {
  id             String       @unique @default(cuid())
  accountId      String
  code           String
  description    String?
  discountType   DiscountType
  discountAmount Float
  expirationDate DateTime
  usageLimit     Int?
  usageCount     Int          @default(0)
  creationDate   DateTime     @default(now())
  lastUpdated    DateTime     @updatedAt
  isActive       Boolean      @default(true)
  isArchive      Boolean      @default(false)

  Account Account? @relation(fields: [accountId], references: [id])

  @@index([id])
  @@index([accountId])
}

enum SaleStatus {
  CREATED
  PROCESSING
  COMPLETED
  CANCELLED
}

enum ItemType {
  COURSE
  PRODUCT
}

model Sale {
  id          String     @unique @default(cuid())
  orderNumber Int        @unique @default(autoincrement())
  accountId   String
  amount      Float
  status      SaleStatus
  itemType    ItemType
  itemId      String     @db.Text
  price       Float
  studentId   String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Account     Account?   @relation(fields: [accountId], references: [id])

  @@index([id])
  @@index([accountId])
}


model Comment {
  id           String   @unique @default(cuid())
  content      String
  rating       Float
  studentId    String
  studentName  String
  studentEmail String
  studentImage String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  courseId     String
  accountId    String
  status       String   @default("verification_pending")
  Course       Course?  @relation(fields: [courseId], references: [id])

  @@index([id])
  @@index([courseId])
  @@index([accountId])
}

model Notification {
  id        String   @unique @default(cuid())
  content   String  
  type      String   @default("WARNNING")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  accountId String
  isRead    Boolean  @default(false)
  Account   Account  @relation(fields: [accountId], references: [id])
  @@index([id])
  @@index([accountId])
}



model Student {
  id            String    @unique @default(cuid())
  full_name     String
  photo_url     String?   @db.Text
  bio           String?
  otp           Int?
  email         String
  phone         String?
  accountId     String
  password      String
  confirmedEmail DateTime?
  bag           Json
  Account       Account   @relation(fields: [accountId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([id])
  @@index([accountId])
}

model Certificate {
  id          String   @unique @default(cuid())
  name        String
  description String?
  studentId   String
  courseName  String
  studentName String
  fileUrl     String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Payments {
  id        String @unique @default(cuid())
  accountId String

  plan                String
  end_of_subscription DateTime
  payload             Json
  strategy            String 
  status              String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  Account             Account  @relation(fields: [accountId], references: [id])

  @@index([id])
  @@index([accountId])
}

model Admin {
  id        String   @unique @default(cuid())
  name      String?
  email     String?  @unique
  photo_url String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id])
}

model AcademiaMessage {
  id            String   @unique @default(cuid())
  senderName    String
  senderEmail   String
  senderMessage String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([id])
}

model OtpCode {
  id        Int      @id @default(autoincrement())
  userId    Int
  code      String
  type      OtpType
  expiresAt DateTime

  @@index([id])
}

enum OtpType {
  CONFIRM_ACCOUNT
  FORGOT_PASSWORD
}

model Referral {
  id                       String   @unique @default(cuid())
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  studentId                String
  studentName              String
  studentImage             String
  accountId                String
  ccp                      String
  numberOfReferredStudents Int


  @@index([id])

}
