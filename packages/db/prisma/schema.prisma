generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

enum PLANS {
  BASIC
  ADVANCED
  PRO
}

model Account {
  id              String            @unique @default(uuid())
  userId          String            @unique
  avatarUrl       String?           @db.Text
  user_name       String?           @db.Text
  user_bio        String?           @db.Text
  AcademyIds      Json
  plan            PLANS?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  Course          Course[]
  Product         Product[]
  Video           Video[]
  Website         Website[]
  Coupon          Coupon[]
  Sale            Sale[]
  Notification    Notification[]
  Student         Student[]
  PaymentsConnect PaymentsConnect[]
  Payments        Payments[]
}

model PaymentsConnect {
  id                String   @unique @default(uuid())
  accountId         String
  chargilyPublicKey String
  chargiySecretKey  String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  Account           Account? @relation(fields: [accountId], references: [id])

  @@index([id])
  @@index([accountId])
}

model Academy {
  id        String   @unique @default(uuid())
  name      String
  subdomain String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
}

model Course {
  id                     String     @unique @default(uuid())
  accountId              String
  title                  String
  courseUrl              String?    @db.VarChar(199)
  youtubeUrl             String?    @db.VarChar(199)
  thumnailUrl            String?    @db.VarChar(199)
  courseResume           String?    @db.VarChar(199)
  courseRequirements     String?    @db.VarChar(199)
  courseWhatYouWillLearn String?    @db.VarChar(199)
  courseDescription      Json?
  seoTitle               String?
  seoDescription         String?
  price                  Float?
  compareAtPrice         Float?
  studenstNbr            String?
  profit                 String?
  length                 Float      @default(0)
  nbrChapters            Float      @default(0)
  trainers               String?
  status                 String
  level                  String     @default("BEGINNER")
  allowComment           Boolean    @default(true)
  allowRating            Boolean    @default(true)
  forceWatchAllCourse    Boolean    @default(true)
  certificate            Boolean    @default(false)
  Account                Account?   @relation(fields: [accountId], references: [id])
  createdAt              DateTime   @default(now())
  updatedAt              DateTime   @updatedAt
  Comment                Comment[]
  Homework               Homework[]
  Exam                   Exam[]

  @@index([id])
  @@index([accountId])
}

model Chapter {
  id          String   @unique @default(uuid())
  courseID    String
  title       String
  modules     Json?
  orderNumber Int
  isVisible   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Product {
  id                String   @unique @default(uuid())
  title             String
  price             Float?
  numberOfDownloads Int?
  subDescription    String?  @db.VarChar(199)
  SeoTitle          String?
  SeoDescription    String?  @db.VarChar(199)
  thumnailUrl       String?
  filrUrl           String?
  description       Json?
  status            String?
  compareAtPrice    Float?
  accountId         String
  isVisible         Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  Account           Account? @relation(fields: [accountId], references: [id])

  @@index([id])
  @@index([accountId])
}

model Video {
  id        String   @unique @default(uuid())
  accountId String
  videoId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Account   Account? @relation(fields: [accountId], references: [id])

  @@index([id])
  @@index([accountId])
}

model Website {
  id           String   @unique @default(uuid())
  accountId    String   @unique
  name         String?
  description  String?  @db.Text
  subdomain    String?  @unique
  customDomain String?  @unique
  pages          Json
  assets        Json?

  privacy_policy Json?
  phoneNumber   String?
  supportEmail  String?
  favicon      String?  @db.Text @default("https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcT51NSq8RTDzIs7VaAcWWvKkyiagU5dz6hiAA&usqp=CAU")
  color        String?
  logo         String?  @db.VarChar(199)
  font         String   @default("font-cal")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  Account      Account? @relation(fields: [accountId], references: [id])
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

model Coupon {
  id             String       @unique @default(uuid())
  accountId      String
  code           String
  description    String?
  discountType   DiscountType
  discountAmount Float
  expirationDate DateTime
  usageLimit     Int?
  usageCount     Int          @default(0)
  creationDate   DateTime     @default(now())
  lastUpdated    DateTime     @updatedAt
  isActive       Boolean      @default(true)
  isArchive      Boolean      @default(false)

  Account Account? @relation(fields: [accountId], references: [id])

  @@index([id])
  @@index([accountId])
}

enum SaleStatus {
  CREATED
  PROCESSING
  COMPLETED
  CANCELLED
}

enum ItemType {
  COURSE
  PRODUCT
}

model Sale {
  id          String     @unique @default(uuid())
  orderNumber Int        @unique @default(autoincrement())
  accountId   String
  amount      Float
  status      SaleStatus
  itemType    ItemType
  itemId      String     @db.Text
  price       Float
  studentId   String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Account     Account?   @relation(fields: [accountId], references: [id])

  @@index([id])
  @@index([accountId])
}

model Homework {
  id          String   @unique @default(uuid())
  title       String
  description String?
  dueDate     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  courseId    String
  Course      Course?  @relation(fields: [courseId], references: [id])

  @@index([id])
  @@index([courseId])
}

model Comment {
  id        String   @unique @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  courseId  String
  Course    Course?  @relation(fields: [courseId], references: [id])

  @@index([id])
  @@index([courseId])
}

model Notification {
  id        String   @unique @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  accountId String
  Account   Account  @relation(fields: [accountId], references: [id])

  @@index([id])
  @@index([accountId])
}

model Exam {
  id          String   @unique @default(uuid())
  title       String
  description String?
  date        DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  courseId  String
  Course    Course?  @relation(fields: [courseId], references: [id])

  @@index([id])
  @@index([courseId])
}

model Student {
  id        String  @unique @default(uuid())
  full_name String
  photo_url String? @db.Text
  bio       String?
  email     String  @unique
  phone     String? @unique
  accountId String
  password  String

  bag     Json
  Account Account @relation(fields: [accountId], references: [id])

  @@index([id])
  @@index([accountId])
}

model Certificate {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  issuer      String
  issueDate   DateTime
  // Add more fields as needed
}



model Payments {
  id          Int @id @default(autoincrement())
  accountId   String
  Account     Account  @relation(fields: [accountId], references: [id])
  plan        String 
  end_of_subscription DateTime 
  payload     Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@index([id])
  @@index([accountId])
}
