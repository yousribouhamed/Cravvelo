generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum SaleStatus {
  CREATED
  PROCESSING
  COMPLETED
  CANCELLED
  REFUNDED
}

enum ItemType {
  COURSE
  PRODUCT
}

enum PaymentTypes {
  BUYPRODUCT
  BUYCOURSE
  SUBSCRIPTION 
  REFERAL_WITHDRAWAL
  REFUND
}

enum PaymentMethod {
  CASH
  CHARGILY
  BANK_TRANSFER
  CREDIT_CARD
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum TransactionType {
  DEBIT
  CREDIT
  REFUND
  WITHDRAWAL
  COMMISSION
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum OtpType {
  CONFIRM_ACCOUNT
  FORGOT_PASSWORD
  PHONE_VERIFICATION
}

enum NotificationType {
  INFO
  WARNING
  ERROR
  SUCCESS
  PROMOTION
}

enum CertificateStatus {
  PENDING
  ISSUED
  REVOKED
}

enum PaymentProvider {
  STRIPE
  CHARGILY
  P2P
  BANK_TRANSFER
  CASH
  CREDIT_CARD
}

// New enums for pricing
enum PricingType {
  FREE
  ONE_TIME
  RECURRING
}

enum AccessDuration {
  LIMITED
  UNLIMITED
}

enum RecurringInterval {
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

enum PurchaseStatus {
  ACTIVE
  EXPIRED
  CANCELLED
  REFUNDED
}

model Account {
  id                 String            @id @unique @default(cuid())
  userId             String            @unique
  avatarUrl          String?           @db.Text
  user_name          String?           @db.Text
  user_bio           String?           @db.Text
  phone              String?
  support_email      String?
  verified           Boolean           @default(false)
  verification_steps Int               @default(0)
 
  
  // Additional profile fields
  firstName          String?           @db.Text
  lastName           String?           @db.Text
  dateOfBirth        DateTime?
  gender             String?         
  country            String?
  city               String?
  address            String?           @db.Text
  postalCode         String?
  website            String?           @db.Text
  socialMediaLinks   Json?            
  profession         String?           @db.Text
  company            String?           @db.Text
  education          String?           @db.Text
  skills             String[]          // Array of skills
  interests          String[]          // Array of interests
  preferredLanguage  String?           @default("ARABIC")
  timezone           String?
  emailNotifications Boolean           @default(true)
  smsNotifications   Boolean           @default(false)
  marketingEmails    Boolean           @default(false)
  profileCompleted   Boolean           @default(false)
  profileVisibility  String?           @default("PUBLIC") // "PUBLIC", "PRIVATE", "FRIENDS_ONLY"
  
  // Account status
  isActive           Boolean           @default(true)
  isSuspended        Boolean           @default(false)
  suspensionReason   String?           @db.Text
  
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  
  // Relations
  Course             Course[]
  Product            Product[]
  Website            Website?
  Coupon             Coupon[]
  Sale               Sale[]
  Notification       Notification[]
  Student            Student[]
  Certificate        Certificate[]
  Wallet             Wallet?
  Payment            Payment[]
  PaymentMethodConfig PaymentMethodConfig[]
  PricingPlans       Pricing[]
  Invoices           Invoice[]
  AppInstall            AppInstall[]
}

model Pricing {
  id                 String            @id @unique @default(cuid())
  accountId          String
  name               String            // e.g., "Basic Access", "Premium", "Full Course"
  description        String?           @db.Text
  pricingType        PricingType
  price              Float?            // null for FREE type
  compareAtPrice     Float?            // Original/compare price for discounts
  currency           String            @default("DZD")
  
  // One-time payment settings
  accessDuration     AccessDuration?   // LIMITED or UNLIMITED
  accessDurationDays Int?              // Only for LIMITED duration
  trialDays           Int? 
  
  // Recurring payment settings
  recurringDays      Int?              // Number of days for recurring billing (replaces recurringInterval)
  
  // Plan status
  isActive           Boolean           @default(true)
  isDefault          Boolean           @default(false)
  
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  
  // Relations
  Account            Account           @relation(fields: [accountId], references: [id], onDelete: Cascade)
  CoursePricingPlans CoursePricingPlan[]
  ProductPricingPlans ProductPricingPlan[]
  AppPricingPlans    AppPricingPlan[]  // New relationship added
  ItemPurchases      ItemPurchase[]
  
  @@index([accountId])
  @@index([pricingType])
}


// Junction table for Course-PricingPlan relationship
model CoursePricingPlan {
  id           String      @id @unique @default(cuid())
  courseId     String
  pricingPlanId String // this referce to pricing 
  isDefault    Boolean     @default(false)
  
  createdAt    DateTime    @default(now())
  
  Course       Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)
  PricingPlan  Pricing @relation(fields: [pricingPlanId], references: [id], onDelete: Cascade)
  
  @@unique([courseId, pricingPlanId])
  @@index([courseId])
  @@index([pricingPlanId])
}

// Junction table for Product-PricingPlan relationship
model ProductPricingPlan {
  id           String      @id @unique @default(cuid())
  productId    String
  pricingPlanId String
  isDefault    Boolean     @default(false)
  
  createdAt    DateTime    @default(now())
  
  Product      Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  PricingPlan  Pricing @relation(fields: [pricingPlanId], references: [id], onDelete: Cascade)
  
  @@unique([productId, pricingPlanId])
  @@index([productId])
  @@index([pricingPlanId])
}

model AppPricingPlan {
  id           String      @id @unique @default(cuid())
  appId        String
  pricingPlanId String
  isDefault    Boolean     @default(false)
  
  createdAt    DateTime    @default(now())
  
  App          App         @relation(fields: [appId], references: [id], onDelete: Cascade)
  PricingPlan  Pricing     @relation(fields: [pricingPlanId], references: [id], onDelete: Cascade)
  
  @@unique([appId, pricingPlanId])
  @@index([appId])
  @@index([pricingPlanId])
}

// New ItemPurchase model
model ItemPurchase {
  id                String         @id @unique @default(cuid())
  studentId         String
  accountId         String         // The seller's account
  pricingPlanId     String
  
  // Item information
  itemType          ItemType       // COURSE or PRODUCT
  itemId            String         // ID of the course or product
  
  // Purchase details
  purchaseAmount    Float
  currency          String         @default("DZD")
  status            PurchaseStatus @default(ACTIVE)
  
  // Access control
  accessStartDate   DateTime       @default(now())
  accessEndDate     DateTime?      // null for unlimited access
  
  // Recurring purchase info
  nextBillingDate   DateTime?      // Only for recurring purchases
  lastBillingDate   DateTime?
  billingAttempts   Int            @default(0)
  
  // Cancellation info
  cancelledAt       DateTime?
  cancellationReason String?       @db.Text
  
  // Purchase metadata
  purchaseNotes     String?        @db.Text
  metadata          Json?
  
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  
  // Relations
  Student           Student        @relation(fields: [studentId], references: [id], onDelete: Cascade)
  PricingPlan       Pricing    @relation(fields: [pricingPlanId], references: [id], onDelete: Restrict)
  
  @@index([studentId])
  @@index([accountId])
  @@index([itemType, itemId])
  @@index([status])
  @@index([accessEndDate])
  @@index([nextBillingDate])
}

model Course {
  id                     String    @id @unique @default(cuid())
  rating                 Float     @default(0)
  accountId              String
  title                  String
  courseUrl              String?   @db.VarChar(199)
  youtubeUrl             String?   @db.VarChar(199)
  thumbnailUrl           String?   @db.VarChar(199)
  courseResume           String?   @db.VarChar(199)
  courseRequirements     String?   @db.VarChar(199)
  courseWhatYouWillLearn String?   @db.VarChar(199)
  courseDescription      Json?
  seoTitle               String?
  seoDescription         String?
  price                  Float?    // Keep for backward compatibility
  compareAtPrice         Float?    // Keep for backward compatibility
  studentsNbr            Int?      @default(0)
  preview_video          String?   @db.VarChar(199)
  profit                 String?
  length                 Float     @default(0)
  nbrChapters            Float     @default(0)
  status                 String
  trainers               String?
  suspended              Boolean   @default(false)
  level                  String?   @default("BEGINNER")
  sound                  String?   @default("ARABIC")
  allowComment           Boolean   @default(true)
  allowRating            Boolean   @default(true)
  forceWatchAllCourse    Boolean   @default(true)
  certificate            Boolean   @default(false)
  
  // Course analytics
  totalViews             Int       @default(0)
  totalEnrollments       Int       @default(0)
  
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  
  // Relations
  Account                Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  Comment                Comment[]
  Chapter                Chapter[]
  Sale                   Sale[]
  CoursePricingPlans     CoursePricingPlan[]

  @@index([accountId])
  @@index([status])
}

model Chapter {
  id          String   @id @unique @default(cuid())
  courseId    String
  title       String
  modules     Json?
  orderNumber Int
  isVisible   Boolean  @default(true)
  duration    Float?   // Duration in minutes
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId])
}

model Product {
  id                String   @id @unique @default(cuid())
  title             String
  price             Float?   // Keep for backward compatibility
  numberOfDownloads Int?     @default(0)
  subDescription    String?  @db.VarChar(199)
  SeoTitle          String?
  SeoDescription    String?  @db.VarChar(199)
  thumbnailUrl      String?
  fileUrl           String?
  description       Json?
  status            String?
  compareAtPrice    Float?   // Keep for backward compatibility
  accountId         String
  isVisible         Boolean  @default(true)
  
  // Product analytics
  totalViews        Int      @default(0)
  totalSales        Int      @default(0)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  Account           Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  Sale              Sale[]
  ProductPricingPlans ProductPricingPlan[]

  @@index([accountId])
  @@index([status])
}

model Website {
  id                              String   @id @unique @default(cuid())
  accountId                       String   @unique
  name                            String?
  description                     String?  @db.Text
  subdomain                       String?  @unique
  customDomain                    String?  @unique
  suspended                       Boolean  @default(false)
  
  // Home screen toggles
  dCoursesHomeScreen              Boolean  @default(true)
  dDigitalProductsHomeScreen      Boolean  @default(false)
  
  // Layout and feature settings
  itemsAlignment                  Boolean  @default(false)
  enableReferral                  Boolean  @default(false)
  enableSalesBanner               Boolean  @default(false)
  enableBlog                      Boolean  @default(false)
  enableTestimonials              Boolean  @default(true)
  enableContactForm               Boolean  @default(true)
  enableNewsletterSignup          Boolean  @default(false)
  
  // SEO and Meta settings
  metaTitle                       String?  @db.Text
  metaDescription                 String?  @db.Text
  metaKeywords                    String?  @db.Text
  googleAnalyticsId               String?
  facebookPixelId                 String?
  
  // Legal and contact info
  privacy_policy                  Json?
  terms_of_service                Json?
  refund_policy                   Json?
  stamp                           String?
  phoneNumber                     String?
  supportEmail                    String?
  address                         String?  @db.Text
  businessHours                   Json?
  
  // Social media links
  facebookUrl                     String?
  twitterUrl                      String?
  instagramUrl                    String?
  linkedinUrl                     String?
  youtubeUrl                      String?
  
  // Branding - Icons and logos
  favicon                         String?  @default("https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcT51NSq8RTDzIs7VaAcWWvKkyiagU5dz6hiAA&usqp=CAU") @db.Text
  logo                            String?  @db.Text
  logoDark                        String?  @db.Text
  
  // Branding - Colors and typography
  primaryColor                    String?  @default("#FC6B00")
  primaryColorDark                String?  @default("#E55A00")
  secondaryColor                  String?  @default("#FFFFFF")
  accentColor                     String?  @default("#000000")
  fontFamily                      String?  @default("Inter")
  
  // Layout customization
  headerStyle                     String?  @default("DEFAULT") // DEFAULT, MINIMAL, CENTERED
  footerStyle                     String?  @default("DEFAULT") // DEFAULT, MINIMAL, EXTENDED
  layoutStyle                     String?  @default("DEFAULT") // DEFAULT, BOXED, FULL_WIDTH
  
  // Currency and localization
  currency                        String?  @default("DZD")
  currencySymbol                  String?  @default("DA")
  language                        String?  @default("ARABIC")
  timezone                        String?  @default("Africa/Algiers")
  
  // Custom CSS and JavaScript
  customCSS                       String?  @db.Text
  customJS                        String?  @db.Text
  
  // Timestamps
  createdAt                       DateTime @default(now())
  updatedAt                       DateTime @updatedAt
  
  // Relations
  Account                         Account           @relation(fields: [accountId], references: [id], onDelete: Cascade)
  WebsiteAnalytics                WebsiteAnalytics[]
  
  @@index([accountId])
  @@index([subdomain])
  @@index([customDomain])
}

model WebsiteAnalytics {
  id         String   @id @unique @default(cuid())
  websiteId  String
  date       DateTime
  visits     Int      @default(0)
  pageViews  Int      @default(0)
  uniqueVisitors Int  @default(0)
  bounceRate Float?
  avgSessionDuration Float?
  topPages   Json?    // Array of page URLs with visit counts
  referrers  Json?    // Array of referrer URLs with counts
  devices    Json?    // Device type breakdown
  browsers   Json?    // Browser breakdown
  countries  Json?    // Country breakdown
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  Website    Website  @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  
  @@unique([websiteId, date])
  @@index([websiteId])
  @@index([date])
}

model Coupon {
  id             String       @id @unique @default(cuid())
  accountId      String
  code           String       @unique
  description    String?
  discountType   DiscountType
  discountAmount Float
  minimumAmount  Float?       // Minimum purchase amount to use coupon
  expirationDate DateTime
  usageLimit     Int?
  usageCount     Int          @default(0)
  isActive       Boolean      @default(true)
  isArchive      Boolean      @default(false)
  
  // Applicable items
  applicableCourses Json?      // Array of course IDs
  applicableProducts Json?     // Array of product IDs
  
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  Account        Account      @relation(fields: [accountId], references: [id], onDelete: Cascade)
  Sale           Sale[]

  @@index([accountId])
  @@index([code])
}

model Sale {
  id              String     @id @unique @default(cuid())
  orderNumber     Int        @unique @default(autoincrement())
  accountId       String
  studentId       String
  amount          Float      // Final amount after discounts
  originalAmount  Float      // Original amount before discounts
  discountAmount  Float?     @default(0)
  taxAmount       Float?     @default(0)
  status          SaleStatus
  itemType        ItemType
  itemId          String     @db.Text
  price           Float
  quantity        Int        @default(1)
  
  // Optional foreign keys for courses and products
  courseId        String?    // Only set when itemType is COURSE
  productId       String?    // Only set when itemType is PRODUCT
  
  // Coupon information
  couponId        String?
  couponCode      String?
  
  // Additional information
  customerNotes   String?    @db.Text
  internalNotes   String?    @db.Text
  
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  
  // Relations
  Account         Account    @relation(fields: [accountId], references: [id], onDelete: Cascade)
  Student         Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)
  Course          Course?    @relation(fields: [courseId], references: [id], onDelete: SetNull)
  Product         Product?   @relation(fields: [productId], references: [id], onDelete: SetNull)
  Coupon          Coupon?    @relation(fields: [couponId], references: [id], onDelete: SetNull)
  Payments        Payment[]  // One sale can have multiple payment attempts

  @@index([accountId])
  @@index([studentId])
  @@index([status])
  @@index([itemType, itemId])
  @@index([courseId])
  @@index([productId])
}

model PaymentMethodConfig {
  id          String           @id @default(cuid())
  accountId   String
  provider    PaymentProvider
  isActive    Boolean          @default(true)

  // Flexible configs (depends on provider)
  config      Json             // {publicKey, secretKey} for Stripe/Chargily
                               // {wallet, network} for P2P
                               // {iban, bankName} for bank transfer

  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  Account     Account          @relation(fields: [accountId], references: [id], onDelete: Cascade)
  Payments    Payment[]

  @@index([accountId])
  @@index([provider])
}

model Payment {
  id                String             @id @default(cuid())
  type              PaymentTypes
  amount            Float
  currency          String             @default("DZD")
  status            PaymentStatus      @default(PENDING)
  method            PaymentMethod?     // Added payment method here

  // Relations - Fixed to avoid conflicts
  studentId         String?
  accountId         String?
  saleId            String?            // Many payments can belong to one sale
  subscriptionId    String?
  methodConfigId    String?            // seller-provided configs (Stripe, P2P, etc.)

  gatewayId         String?            // Payment gateway transaction ID
  gatewayResponse   Json?

  description       String?            @db.Text
  metadata          Json?

   // New: checkout session or redirect url
  checkoutUrl       String?            @db.Text

  // Refund info
  refundAmount      Float?             @default(0)
  refundReason      String?            @db.Text
  refundedAt        DateTime?

  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  // Relations
  Account           Account?           @relation(fields: [accountId], references: [id], onDelete: SetNull)
  Student           Student?           @relation(fields: [studentId], references: [id], onDelete: SetNull)
  Sale              Sale?              @relation(fields: [saleId], references: [id], onDelete: SetNull)
  MethodConfig      PaymentMethodConfig? @relation(fields: [methodConfigId], references: [id], onDelete: SetNull)
  Proofs            PaymentProof[]
  Transactions      Transaction[]
  Invoices          Invoice[]
  AppInstall        AppInstall[]

  @@index([accountId])
  @@index([studentId])
  @@index([saleId])
  @@index([subscriptionId])
  @@index([status])
  @@index([methodConfigId])
}

model PaymentProof {
  id          String   @id @default(cuid())
  paymentId   String
  fileUrl     String   @db.Text
  note        String?  @db.Text
  verified    Boolean  @default(false)
  createdAt   DateTime @default(now())

  Payment     Payment  @relation(fields: [paymentId], references: [id], onDelete: Cascade)

  @@index([paymentId])
}



model Wallet {
  id            String        @id @unique @default(cuid())
  accountId     String        @unique
  balance       Float         @default(0)
  currency      String        @default("DZD")
  
  // Wallet status
  isActive      Boolean       @default(true)
  isFrozen      Boolean       @default(false)
  frozenReason  String?       @db.Text
  frozenAt      DateTime?
  
  // Limits
  dailyLimit    Float?
  monthlyLimit  Float?
  
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  // Relations
  Account       Account       @relation(fields: [accountId], references: [id], onDelete: Cascade)
  Transactions  Transaction[] // Fixed relation name to be more clear

  @@index([accountId])
}

model Transaction {
  id                String            @id @unique @default(cuid())
  walletId          String?
  paymentId         String?
  type              TransactionType
  amount            Float
  currency          String            @default("DZD")
  status            TransactionStatus @default(PENDING)
  
  // Transaction details
  description       String?           @db.Text
  reference         String?           @unique // External reference number
  metadata          Json?             // Additional transaction data
  
  // Balance tracking
  balanceBefore     Float?
  balanceAfter      Float?
  
  // Related information
  relatedEntityType String?           // SALE, REFUND, COMMISSION, etc.
  relatedEntityId   String?
  
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  // Relations
  Wallet            Wallet?           @relation(fields: [walletId], references: [id], onDelete: SetNull)
  Payment           Payment?          @relation(fields: [paymentId], references: [id], onDelete: SetNull)

  @@index([walletId])
  @@index([paymentId])
  @@index([type])
  @@index([status])
  @@index([reference])
}

model Comment {
  id           String   @id @unique @default(cuid())
  content      String   @db.Text
  rating       Float
  studentId    String

  courseId     String
  accountId    String
  status       String   @default("verification_pending")
  
  // Additional fields
  isApproved   Boolean  @default(false)
  isPublic     Boolean  @default(true)
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  Course       Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  Student      Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@index([courseId])
  @@index([accountId])
  @@index([studentId])
  @@index([status])
}

model Notification {
  id         String           @id @unique @default(cuid())
  content    String           @db.Text
  title      String?
  type       NotificationType @default(INFO)
  accountId  String
  isRead     Boolean          @default(false)
  isArchived Boolean          @default(false)
  
  // Additional fields
  actionUrl  String?          // URL to redirect when notification is clicked
  metadata   Json?            // Additional notification data
  
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  
  Account    Account          @relation(fields: [accountId], references: [id], onDelete: Cascade)
  
  @@index([accountId])
  @@index([isRead])
  @@index([type])
}

model Student {
  id                        String    @id @unique @default(cuid())
  full_name                 String
  photo_url                 String?   @db.Text
  bio                       String?   @db.Text
  otp                       Int?
  email                     String
  phone                     String?
  accountId                 String
  password                  String
  bag                       Json      // Shopping cart/wishlist
  
  // Email verification fields
  emailVerified             Boolean   @default(false)
  emailVerifiedAt          DateTime?
  emailVerificationToken   String?   @unique
  emailVerificationExpiry  DateTime?
  
  // Password reset fields
  passwordResetToken       String?   @unique
  passwordResetExpiry      DateTime?
  
  // Activity tracking
  lastVisitedAt            DateTime?
  isActive                 Boolean   @default(true)
  
  // Student preferences
  preferredLanguage        String?   @default("ARABIC")
  timezone                 String?
  emailNotifications       Boolean   @default(true)
  smsNotifications         Boolean   @default(false)
  
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
  
  // Relations
  Account                  Account      @relation(fields: [accountId], references: [id], onDelete: Cascade)
  Sales                    Sale[]       // Fixed relation name
  Comments                 Comment[]    // Fixed relation name
  Certificates             Certificate[] // Fixed relation name
  Referrals                Referral[]   // Fixed relation name
  Payments                 Payment[]    // Fixed relation name
  ItemPurchases            ItemPurchase[] // New relation
  Invoices                 Invoice[]
  
  @@index([accountId])
  @@index([email, accountId])
  @@index([emailVerificationToken])
  @@index([passwordResetToken])
}

model Certificate {
  id          String            @id @unique @default(cuid())
  name        String
  description String?           @db.Text
  studentId   String
  accountId   String
  courseName  String
  studentName String
  fileUrl     String            @db.Text
  status      CertificateStatus @default(PENDING)
  
  // Certificate details
  issueDate   DateTime?
  expiryDate  DateTime?
  
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  
  Account     Account           @relation(fields: [accountId], references: [id], onDelete: Cascade)
  Student     Student           @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@index([accountId])
  @@index([studentId])
  @@index([status])
}

model Referral {
  id                       String   @id @unique @default(cuid())
  studentId                String
  accountId                String
  studentName              String
  studentImage             String?
  ccp                      String?  // Bank account for payouts
  numberOfReferredStudents Int      @default(0)
  totalEarnings            Float    @default(0)
  
  // Payout information
  lastPayoutAt             DateTime?
  pendingPayout            Float    @default(0)
  totalPaidOut             Float    @default(0)
  
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  
  Student                  Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@index([studentId])
  @@index([accountId])
}



model AcademiaMessage {
  id            String   @id @unique @default(cuid())
  senderName    String
  senderEmail   String
  senderMessage String   @db.Text
  isRead        Boolean  @default(false)
  isArchived    Boolean  @default(false)
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([isRead])
  @@index([senderEmail])
}

model OtpCode {
  id        String   @id @unique @default(cuid())
  userId    String
  code      String
  type      OtpType
  expiresAt DateTime
  isUsed    Boolean  @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, type])
  @@index([code])
}

model App {
  id             String   @id @default(cuid())
  name           String
  slug           String   @unique
  shortDesc      String
  longDesc       Json      // rich text (stored as JSON for flexibility, e.g. Slate.js or TipTap)
  logoUrl        String?
  images         String[]  // array of screenshots / preview images
  category       String?
  installsCount  Int       @default(0)
  createdBy      String
  configSchema   Json      // JSON schema for settings (API keys, options, etc.)
  uiInjection    Json      // JSON rules for injecting UI (dashboard cards, menu links, custom pages, etc.)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  installations  AppInstall[]
  AppPricingPlans AppPricingPlan[]  // New relationship added
}

model AppInstall {
  id               String      @id @default(cuid())
  appId            String
  accountId        String?
  studentId        String?

  paymentId        String
  payment          Payment     @relation(fields: [paymentId], references: [id], onDelete: Cascade)

  // Snapshot of pricing plan
  planName         String
  subscriptionAmount Float
  currency         String
  trialDays        Int? 
  recurringDays    Int?
  isRecurring      Boolean     @default(false)

  status           PurchaseStatus @default(ACTIVE)
  installedAt      DateTime    @default(now())
  uninstalledAt    DateTime?

  App              App         @relation(fields: [appId], references: [id], onDelete: Cascade)
  Account          Account?    @relation(fields: [accountId], references: [id], onDelete: Cascade)
  
  @@index([appId])
  @@index([accountId])
  @@index([studentId])
}



model Invoice {
  id           String        @id @default(cuid())
  paymentId    String
  accountId    String?
  studentId    String?

  amount       Float
  currency     String        @default("DZD")
  status       PaymentStatus @default(PENDING)
  description  String?       @db.Text
  dueDate      DateTime?
  paidAt       DateTime?

  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  // Relations
  Payment      Payment       @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  Account      Account?      @relation(fields: [accountId], references: [id], onDelete: SetNull)
  Student      Student?      @relation(fields: [studentId], references: [id], onDelete: SetNull)

  @@index([paymentId])
  @@index([accountId])
  @@index([studentId])
  @@index([status])
}



enum InvoiceStatus {
  PENDING
  PAID
  CANCELED
  OVERDUE
}

model Admin {
  id        String   @id @unique @default(cuid())
  name      String?
  email     String?  @unique
  photo_url String?  @db.Text
  password  String
  role      String   @default("ADMIN") // SUPER_ADMIN, ADMIN, MODERATOR
  isActive  Boolean  @default(true)
  
  // Admin permissions
  permissions Json?

  // Self-relation: who created this admin
  createdBy   Admin?   @relation("AdminCreatedBy", fields: [createdById], references: [id])
  createdById String?

  // Self-relation: which admins this one has created
  createdAdmins Admin[] @relation("AdminCreatedBy")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  AdminActivity AdminActivity[]
}

enum AdminRole {
  SUPER_ADMIN
  ADMIN
  MODERATOR
}

model AdminActivity {
  id        String   @id @default(cuid())
  action    String
  meta      Json?
  createdAt DateTime @default(now())
  adminId   String
  admin     Admin    @relation(fields: [adminId], references: [id])
}


model WaitingList {
  id        String   @id @default(cuid())
  name      String?  
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model SupportTicket {
  id         String   @id @default(cuid())
  name       String
  email      String
  phone      String?     // اختياري
  subject    String
  message    String
  priority   String      // low | medium | high
  newsletter Boolean     @default(false)
  terms      Boolean
  status     String      @default("open") // open | in_progress | closed
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}