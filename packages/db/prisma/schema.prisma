// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                     String         @unique @default(uuid())
  userId                 String         @unique
  avatarUrl              String?        @db.Text
  AcademyIds             Json
  stripeCustomerId       String?        @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?        @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?        @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime?      @map(name: "stripe_current_period_end")
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
  Course                 Course[]
  Product                Product[]
  Video                  Video[]
  Website                Website[]
  Coupon                 Coupon[]
  Order                  Order[]
  Notification           Notification[]
  Student                Student[]
  PaymentsConnect        PaymentsConnect[]
}

model PaymentsConnect {
  id                String   @unique @default(uuid())
  accountId         String
  chargilyPublicKey String 
  chargiySecretKey  String 
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  Account           Account?   @relation(fields: [accountId], references: [id])
  @@index([id])
  @@index([accountId])
}

model Academy {
  id        String   @unique @default(uuid())
  name      String
  subdomain String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
}

model Course {
  id                String  @unique @default(uuid())
  accountId         String
  title             String
  courseUrl         String? @db.LongText
  youtubeUrl        String? @db.LongText
  thumnailUrl       String? @db.LongText
  courseResume      String? @db.LongText
  courseRequirements String? @db.LongText
  courseWhatYouWillLearn  String? @db.LongText
  courseDescription Json?
  seoTitle          String?
  seoDescription    String?
  price             Float?
  compareAtPrice    Float?
  studenstNbr       String?
  profit            String?
  trainers          String?
  status            String
  allowComment      Boolean    @default(true)
  certificate       Boolean    @default(false)
  Account           Account?   @relation(fields: [accountId], references: [id])
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  Comment           Comment[]
  Homework          Homework[]
  Exam              Exam[]

  @@index([id])
  @@index([accountId])
}

model Chapter {
  id          String   @unique @default(uuid())
  courseID    String
  title       String
  modules     Json?
  orderNumber Int
  isVisible   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Product {
  id                String   @unique @default(uuid())
  title             String
  price             Float?
  numberOfDownloads Int?
  subDescription    String?  @db.LongText
  SeoTitle          String?
  SeoDescription    String?  @db.LongText
  thumnailUrl       String?
  filrUrl           String?
  description       Json?
  status            String?
  compareAtPrice    Float?
  accountId         String
  isVisible         Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  Account           Account? @relation(fields: [accountId], references: [id])

  @@index([id])
  @@index([accountId])
}

model Video {
  id        String   @unique @default(uuid())
  accountId String
  videoId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Account   Account? @relation(fields: [accountId], references: [id])

  @@index([id])
  @@index([accountId])
}

model Website {
  id           String   @unique @default(uuid())
  accountId    String   @unique
  name         String?
  description  String?  @db.Text
  subdomain    String?  @unique
  customDomain String?  @unique
  pages        Json
  assets       Json?
  favicon      String?
  logo         String?  @db.LongText
  font         String   @default("font-cal")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  Account      Account? @relation(fields: [accountId], references: [id])
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

model Coupon {
  id             String       @unique @default(uuid())
  accountId      String    
  code           String     
  description    String?
  discountType   DiscountType
  discountAmount Float
  expirationDate DateTime
  usageLimit     Int?
  usageCount     Int          @default(0)
  creationDate   DateTime     @default(now())
  lastUpdated    DateTime     @updatedAt
  isActive       Boolean      @default(true)
  isArchive      Boolean      @default(false)

  Account Account? @relation(fields: [accountId], references: [id])

  @@index([id])
  @@index([accountId])
}

enum OrderStatus {
  CREATED
  PROCESSING
  COMPLETED
  CANCELLED
}

model Order {
  id          String      @unique @default(uuid())
  orderNumber Int         @unique @default(autoincrement())
  accountId   String      @unique
  amount      Float
  status      OrderStatus
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  Account     Account?    @relation(fields: [accountId], references: [id])

  @@index([id])
  @@index([accountId])
}

model Homework {
  id          String   @unique @default(uuid())
  title       String
  description String?
  dueDate     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  courseId    String
  Course      Course?  @relation(fields: [courseId], references: [id])

  @@index([id])
  @@index([courseId])
}

model Comment {
  id        String   @unique @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  courseId  String
  Course    Course?  @relation(fields: [courseId], references: [id])

  @@index([id])
  @@index([courseId])
}

model Notification {
  id        String   @unique @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  accountId String
  Account   Account  @relation(fields: [accountId], references: [id])

  @@index([id])
  @@index([accountId])
}

model Exam {
  id          String   @unique @default(uuid())
  title       String
  description String?
  date        DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  courseId  String
  Course    Course?  @relation(fields: [courseId], references: [id])

  @@index([id])
  @@index([courseId])
}


model Student {
  id          String   @unique @default(uuid())
  full_name   String
  photo_url   String? 
  email       String   @unique
  phone       String?   @unique
  accountId   String 
  password    String 
  bag         Json
  Account   Account  @relation(fields: [accountId], references: [id])

  @@index([id])
  @@index([accountId])
}

model Certificate {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  issuer      String
  issueDate   DateTime
  // Add more fields as needed
}


model webhooks {
  id          Int      @id @default(autoincrement())
  payload     Json
}